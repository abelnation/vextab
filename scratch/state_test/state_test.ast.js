// Generated by CoffeeScript 1.6.3
(function() {
  var BarElement, ChordElement, DoubleBarElement, DurationElement, FretBendNoteElement, FretHammerOnNoteElement, FretMuteElement, FretNoteElement, FretPullOffNoteElement, FretSlideDownNoteElement, FretSlideUpNoteElement, GroupElement, OptionElement, PredefinedElement, PredefinedInvokeElement, RepeatCloseBarElement, RepeatCloseOpenBarElement, RepeatMeasureElement, RepeatOpenBarElement, RestElement, SingleBarElement, TabElement, TabRootElement, TabSection,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TabRootElement = (function() {
    function TabRootElement() {
      this.type = "TabRootElement";
      this.elements = [];
    }

    TabRootElement.prototype.addElement = function(elem) {
      return this.elements.push(elem);
    };

    TabRootElement.prototype.toString = function() {
      var element, result, _i, _len, _ref;
      result = "" + this.type + "\n";
      _ref = this.elements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        result += element + "\n";
      }
      return result;
    };

    return TabRootElement;

  })();

  TabSection = (function() {
    function TabSection(loc, options) {
      if (options == null) {
        options = {};
      }
      this.type = "TabSection";
      this.loc = loc;
      this.options = options;
      this.elements = [];
    }

    TabSection.prototype.addElement = function(elem) {
      return this.elements.push(elem);
    };

    TabSection.prototype.toString = function() {
      var element, key, option, result, _i, _len, _ref, _ref1;
      result = "" + this.type + ": " + (JSON.stringify(this.loc)) + "\n  ";
      _ref = this.options;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        option = _ref[key];
        result += option + " ";
      }
      _ref1 = this.elements;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        element = _ref1[_i];
        result += element + "\n";
      }
      return result;
    };

    return TabSection;

  })();

  TabElement = (function() {
    function TabElement(loc, options) {
      if (options == null) {
        options = {};
      }
      this.type = "TabElement";
      this.loc = loc;
      this.options = options;
    }

    TabElement.prototype.toString = function() {
      return "" + this.type + ": " + (JSON.stringify(this.loc));
    };

    return TabElement;

  })();

  OptionElement = (function() {
    function OptionElement(key, value, loc) {
      this.type = "OptionElement";
      this.key = key;
      this.value = value;
    }

    OptionElement.prototype.toString = function() {
      return "" + this.key + "=" + this.value;
    };

    return OptionElement;

  })();

  PredefinedElement = (function() {
    function PredefinedElement(id, statements, loc) {
      if (statements == null) {
        statements = [];
      }
      this.type = "PredefinedElement";
      this.loc = loc;
      this.id = id;
      this.statements = statements;
    }

    PredefinedElement.prototype.toString = function() {
      var result, statement, _i, _len, _ref;
      result = "" + this.type + ": " + this.id;
      _ref = this.statements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        statement = _ref[_i];
        result += "\n  " + statement;
      }
      return result;
    };

    return PredefinedElement;

  })();

  PredefinedInvokeElement = (function() {
    function PredefinedInvokeElement(node, loc, options) {
      var _base;
      if (options == null) {
        options = {};
      }
      this.type = "PredefinedInvokeElement";
      this.loc = loc;
      this.id = node.id;
      this.options = options;
      if ((_base = this.options).repeat == null) {
        _base.repeat = 1;
      }
      this.statements = node.statements;
    }

    PredefinedInvokeElement.prototype.toString = function() {
      var i, result, statement, _i, _j, _len, _ref, _ref1;
      result = "" + this.type + ": " + this.id;
      for (i = _i = 0, _ref = this.options.repeat; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i !== 0) {
          result += "\n    -- " + (i + 1) + "x --";
        }
        _ref1 = this.statements;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          statement = _ref1[_j];
          result += "\n    " + statement;
        }
      }
      return result;
    };

    return PredefinedInvokeElement;

  })();

  GroupElement = (function() {
    function GroupElement(statements, loc, options) {
      var _base;
      if (options == null) {
        options = {};
      }
      this.type = "GroupElement";
      this.loc = loc;
      this.statements = statements;
      this.options = options;
      if ((_base = this.options).repeat == null) {
        _base.repeat = 1;
      }
    }

    GroupElement.prototype.toString = function() {
      var i, result, statement, _i, _j, _len, _ref, _ref1;
      result = "" + this.type + ": " + (JSON.stringify(this.loc));
      for (i = _i = 0, _ref = this.options.repeat; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i !== 0) {
          result += "\n    -- " + (i + 1) + "x --";
        }
        _ref1 = this.statements;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          statement = _ref1[_j];
          result += "\n    " + statement;
        }
      }
      return result;
    };

    return GroupElement;

  })();

  DurationElement = (function(_super) {
    __extends(DurationElement, _super);

    function DurationElement(length, loc, options) {
      if (options == null) {
        options = {};
      }
      DurationElement.__super__.constructor.call(this, loc, options);
      this.type = "DurationElement";
      this.length = length;
    }

    DurationElement.prototype.toString = function() {
      return "" + this.type + ": " + this.length + " " + (JSON.stringify(this.loc));
    };

    return DurationElement;

  })(TabElement);

  FretNoteElement = (function(_super) {
    __extends(FretNoteElement, _super);

    function FretNoteElement(string, fret, loc, options) {
      if (options == null) {
        options = {};
      }
      FretNoteElement.__super__.constructor.call(this, loc, options);
      this.type = "FretNoteElement";
      this.string = string;
      this.fret = fret;
      this.options = options;
    }

    FretNoteElement.prototype.toString = function() {
      return "" + this.type + ": string-" + this.string + " fret-" + this.fret + " " + (JSON.stringify(this.options));
    };

    return FretNoteElement;

  })(TabElement);

  FretMuteElement = (function(_super) {
    __extends(FretMuteElement, _super);

    function FretMuteElement(string, loc, options) {
      if (options == null) {
        options = {};
      }
      FretMuteElement.__super__.constructor.call(this, loc, options);
      this.type = "MuteNoteElement";
      this.string = string;
    }

    return FretMuteElement;

  })(TabElement);

  FretHammerOnNoteElement = (function(_super) {
    __extends(FretHammerOnNoteElement, _super);

    function FretHammerOnNoteElement(string, fret, loc, options) {
      if (options == null) {
        options = {};
      }
      FretHammerOnNoteElement.__super__.constructor.call(this, string, fret, loc, options);
      this.type = "FretHammerOnNoteElement";
    }

    return FretHammerOnNoteElement;

  })(FretNoteElement);

  FretPullOffNoteElement = (function(_super) {
    __extends(FretPullOffNoteElement, _super);

    function FretPullOffNoteElement(string, fret, loc, options) {
      if (options == null) {
        options = {};
      }
      FretPullOffNoteElement.__super__.constructor.call(this, string, fret, loc, options);
      this.type = "FretPullOffNoteElement";
    }

    return FretPullOffNoteElement;

  })(FretNoteElement);

  FretBendNoteElement = (function(_super) {
    __extends(FretBendNoteElement, _super);

    function FretBendNoteElement(string, fret, loc, options) {
      if (options == null) {
        options = {};
      }
      FretBendNoteElement.__super__.constructor.call(this, string, fret, loc, options);
      this.type = "FretBendNoteElement";
    }

    return FretBendNoteElement;

  })(FretNoteElement);

  FretSlideDownNoteElement = (function(_super) {
    __extends(FretSlideDownNoteElement, _super);

    function FretSlideDownNoteElement(string, fret, loc, options) {
      if (options == null) {
        options = {};
      }
      FretSlideDownNoteElement.__super__.constructor.call(this, string, fret, loc, options);
      this.type = "FretSlideDownNoteElement";
    }

    return FretSlideDownNoteElement;

  })(FretNoteElement);

  FretSlideUpNoteElement = (function(_super) {
    __extends(FretSlideUpNoteElement, _super);

    function FretSlideUpNoteElement(string, fret, loc, options) {
      if (options == null) {
        options = {};
      }
      FretSlideUpNoteElement.__super__.constructor.call(this, string, fret, loc, options);
      this.type = "FretSlideUpNoteElement";
    }

    return FretSlideUpNoteElement;

  })(FretNoteElement);

  ChordElement = (function(_super) {
    __extends(ChordElement, _super);

    function ChordElement(notes, loc, options) {
      ChordElement.__super__.constructor.call(this, loc, options);
      this.type = "ChordElement";
      this.notes = notes;
    }

    ChordElement.prototype.toString = function() {
      var note, result, _i, _len, _ref;
      result = "" + this.type + ": " + (JSON.stringify(this.loc));
      _ref = this.notes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        note = _ref[_i];
        result += "\n  " + note;
      }
      return result;
    };

    return ChordElement;

  })(TabElement);

  RestElement = (function(_super) {
    __extends(RestElement, _super);

    function RestElement(loc) {
      RestElement.__super__.constructor.call(this, loc);
      this.type = "RestElement";
    }

    return RestElement;

  })(TabElement);

  BarElement = (function(_super) {
    __extends(BarElement, _super);

    function BarElement(loc) {
      BarElement.__super__.constructor.call(this, loc);
      this.type = "BarElement";
    }

    return BarElement;

  })(TabElement);

  SingleBarElement = (function(_super) {
    __extends(SingleBarElement, _super);

    function SingleBarElement(loc) {
      SingleBarElement.__super__.constructor.call(this, loc);
      this.type = "SingleBarElement";
    }

    return SingleBarElement;

  })(BarElement);

  DoubleBarElement = (function(_super) {
    __extends(DoubleBarElement, _super);

    function DoubleBarElement(loc) {
      DoubleBarElement.__super__.constructor.call(this, loc);
      this.type = "DoubleBarElement";
    }

    return DoubleBarElement;

  })(BarElement);

  RepeatCloseOpenBarElement = (function(_super) {
    __extends(RepeatCloseOpenBarElement, _super);

    function RepeatCloseOpenBarElement(loc) {
      RepeatCloseOpenBarElement.__super__.constructor.call(this, loc);
      this.type = "RepeatCloseOpenBarElement";
    }

    return RepeatCloseOpenBarElement;

  })(BarElement);

  RepeatOpenBarElement = (function(_super) {
    __extends(RepeatOpenBarElement, _super);

    function RepeatOpenBarElement(loc) {
      RepeatOpenBarElement.__super__.constructor.call(this, loc);
      this.type = "RepeatOpenBarElement";
    }

    return RepeatOpenBarElement;

  })(BarElement);

  RepeatCloseBarElement = (function(_super) {
    __extends(RepeatCloseBarElement, _super);

    function RepeatCloseBarElement(loc) {
      RepeatCloseBarElement.__super__.constructor.call(this, loc);
      this.type = "RepeatCloseBarElement";
    }

    return RepeatCloseBarElement;

  })(BarElement);

  RepeatMeasureElement = (function(_super) {
    __extends(RepeatMeasureElement, _super);

    function RepeatMeasureElement(loc) {
      RepeatMeasureElement.__super__.constructor.call(this, loc);
      this.type = "RepeatMeasureElement";
    }

    return RepeatMeasureElement;

  })(TabElement);

  module.exports = {
    TabSection: TabSection,
    TabElement: TabElement,
    OptionElement: OptionElement,
    PredefinedElement: PredefinedElement,
    PredefinedInvokeElement: PredefinedInvokeElement,
    GroupElement: GroupElement,
    FretNoteElement: FretNoteElement,
    FretMuteElement: FretMuteElement,
    FretHammerOnNoteElement: FretHammerOnNoteElement,
    FretBendNoteElement: FretBendNoteElement,
    FretPullOffNoteElement: FretPullOffNoteElement,
    FretSlideUpNoteElement: FretSlideUpNoteElement,
    FretSlideDownNoteElement: FretSlideDownNoteElement,
    RestElement: RestElement,
    DurationElement: DurationElement,
    ChordElement: ChordElement,
    BarElement: BarElement,
    SingleBarElement: SingleBarElement,
    DoubleBarElement: DoubleBarElement,
    RepeatCloseOpenBarElement: RepeatCloseOpenBarElement,
    RepeatOpenBarElement: RepeatOpenBarElement,
    RepeatCloseBarElement: RepeatCloseBarElement,
    RepeatMeasureElement: RepeatMeasureElement
  };

}).call(this);
