/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var state_test = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"statements":4,"EOF":5,"statement":6,"statement_group":7,"predefine_invoke":8,"chord":9,"bar_token":10,"REPEAT_MEASURE":11,"REST":12,"DURATION":13,"note_token":14,"SECTION":15,"options":16,"NL":17,"DEFINE":18,"[":19,"]":20,"*":21,"INTEGER":22,"QUOTED_ID":23,"(":24,"note_tokens":25,")":26,"string_fret_marker":27,"fret_group":28,".":29,"-":30,"fret_note":31,"articulated_fret_note":32,"MUTE":33,"FINGER":34,"BEND":35,"HAMMERON":36,"PULLOFF":37,"SLIDE_UP":38,"SLIDE_DOWN":39,"SINGLE_BAR":40,"DOUBLE_BAR":41,"REPEAT_CLOSEOPEN":42,"REPEAT_OPEN":43,"REPEAT_CLOSE":44,"OPTION":45,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"REPEAT_MEASURE",12:"REST",13:"DURATION",15:"SECTION",17:"NL",18:"DEFINE",19:"[",20:"]",21:"*",22:"INTEGER",23:"QUOTED_ID",24:"(",26:")",29:".",30:"-",33:"MUTE",34:"FINGER",35:"BEND",36:"HAMMERON",37:"PULLOFF",38:"SLIDE_UP",39:"SLIDE_DOWN",40:"SINGLE_BAR",41:"DOUBLE_BAR",42:"REPEAT_CLOSEOPEN",43:"REPEAT_OPEN",44:"REPEAT_CLOSE",45:"OPTION"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,3],[7,3],[7,5],[8,3],[8,5],[9,3],[25,1],[25,2],[14,1],[27,3],[28,3],[28,2],[28,1],[28,1],[31,1],[31,1],[31,2],[31,2],[32,1],[32,1],[32,1],[32,1],[32,1],[10,1],[10,1],[10,1],[10,1],[10,1],[16,0],[16,2],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1].join("\n"); console.log(this.$); 
break;
case 2: this.$ = ""; 
break;
case 3: 
      if ($$[$0] != undefined) { this.$ = [$$[$0]]; } 
      else { this.$ = []; }
    
break;
case 4: 
      this.$ = $$[$0-1]; 
      if($$[$0-1]) { $$[$0-1].push($$[$0]); } 
    
break;
case 5: this.$ = $$[$0]; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: $$[$0] = $$[$0]; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = new ast.RepeatMeasureElement(_$[$0]); 
break;
case 10: this.$ = new ast.RestElement(_$[$0]); 
break;
case 11: this.$ = new ast.DurationElement($$[$0], _$[$0]); 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = new ast.TabSection(_$[$0-2], $$[$0-1]); 
break;
case 14: 
      defines[$$[$0-2]] = new ast.PredefinedElement($$[$0-2], $$[$0-1], _$[$0-2]);
      this.$ = defines[$$[$0-2]]
    
break;
case 15: this.$ = new ast.GroupElement($$[$0-1], _$[$0-2]); 
break;
case 16: this.$ = new ast.GroupElement($$[$0-3], _$[$0-3], { repeat: parseInt($$[$0]) }); 
break;
case 17: 
      if (defines[$$[$0-1]]) { this.$ = new ast.PredefinedInvokeElement(defines[$$[$0-1]], _$[$0-1]); } 
      else { this.$ = undefined; }
    
break;
case 18: 
      if (defines[$$[$0-3]]) { this.$ = new ast.PredefinedInvokeElement(defines[$$[$0-3]], _$[$0-3], { repeat: parseInt($$[$0]) }); } 
      else { this.$ = undefined; }
    
break;
case 19: this.$ = new ast.ChordElement($$[$0-1], _$[$0-1]); 
break;
case 20: this.$ = [$$[$0]]; 
break;
case 21: this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: 
      this.$ = [];
      for (var i=0; i<$$[$0-2].length; i++) {
        this.$.push( fretElemForValues($$[$0], $$[$0-2][i], _$[$0-2]) )
      }
      this.$ = this.$.join("\n");
    
break;
case 24: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 25: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 26: this.$ = [$$[$0]]; 
break;
case 27: this.$ = [$$[$0]]; 
break;
case 28: this.$ = ["",$$[$0]]; 
break;
case 29: this.$ = ["x"]; 
break;
case 30: this.$ = ["", $$[$0-1], {"finger": $$[$0]}] 
break;
case 31: this.$ = ["x","x", {"finger": $$[$0]}] 
break;
case 32: this.$ = ["b",$$[$0]]; 
break;
case 33: this.$ = ["h",$$[$0]]; 
break;
case 34: this.$ = ["p",$$[$0]]; 
break;
case 35: this.$ = ["/",$$[$0]]; 
break;
case 36: this.$ = ["\\",$$[$0]]; 
break;
case 37: this.$ = new ast.SingleBarElement(_$[$0]); 
break;
case 38: this.$ = new ast.DoubleBarElement(_$[$0]); 
break;
case 39: this.$ = new ast.RepeatCloseOpenBarElement(_$[$0]); 
break;
case 40: this.$ = new ast.RepeatOpenBarElement(_$[$0]); 
break;
case 41: this.$ = new ast.RepeatCloseBarElement(_$[$0]); 
break;
case 42: this.$ = {}; 
break;
case 43: 
      this.$ = $$[$0-1]
      var tokens = $$[$0].split("=");
      this.$[tokens[0]] = new ast.OptionElement(tokens[0], tokens[1], _$[$0]); 
    
break;
case 44: 
      var tokens = $$[$0].split("=");
      this.$ = {};
      this.$[tokens[0]] = new ast.OptionElement(tokens[0], tokens[1], _$[$0]); 
    
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:[1,9],12:[1,10],13:[1,11],14:12,15:[1,13],18:[1,14],19:[1,15],22:[1,26],24:[1,16],27:22,28:23,31:24,32:25,33:[1,27],35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32],40:[1,17],41:[1,18],42:[1,19],43:[1,20],44:[1,21]},{1:[3]},{5:[1,33],6:34,7:5,8:6,9:7,10:8,11:[1,9],12:[1,10],13:[1,11],14:12,15:[1,13],18:[1,14],19:[1,15],22:[1,26],24:[1,16],27:22,28:23,31:24,32:25,33:[1,27],35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32],40:[1,17],41:[1,18],42:[1,19],43:[1,20],44:[1,21]},{1:[2,2]},{5:[2,3],11:[2,3],12:[2,3],13:[2,3],15:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],22:[2,3],24:[2,3],33:[2,3],35:[2,3],36:[2,3],37:[2,3],38:[2,3],39:[2,3],40:[2,3],41:[2,3],42:[2,3],43:[2,3],44:[2,3]},{5:[2,5],11:[2,5],12:[2,5],13:[2,5],15:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],22:[2,5],24:[2,5],33:[2,5],35:[2,5],36:[2,5],37:[2,5],38:[2,5],39:[2,5],40:[2,5],41:[2,5],42:[2,5],43:[2,5],44:[2,5]},{5:[2,6],11:[2,6],12:[2,6],13:[2,6],15:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],22:[2,6],24:[2,6],33:[2,6],35:[2,6],36:[2,6],37:[2,6],38:[2,6],39:[2,6],40:[2,6],41:[2,6],42:[2,6],43:[2,6],44:[2,6]},{5:[2,7],11:[2,7],12:[2,7],13:[2,7],15:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],22:[2,7],24:[2,7],33:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],39:[2,7],40:[2,7],41:[2,7],42:[2,7],43:[2,7],44:[2,7]},{5:[2,8],11:[2,8],12:[2,8],13:[2,8],15:[2,8],17:[2,8],18:[2,8],19:[2,8],20:[2,8],22:[2,8],24:[2,8],33:[2,8],35:[2,8],36:[2,8],37:[2,8],38:[2,8],39:[2,8],40:[2,8],41:[2,8],42:[2,8],43:[2,8],44:[2,8]},{5:[2,9],11:[2,9],12:[2,9],13:[2,9],15:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],22:[2,9],24:[2,9],33:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],39:[2,9],40:[2,9],41:[2,9],42:[2,9],43:[2,9],44:[2,9]},{5:[2,10],11:[2,10],12:[2,10],13:[2,10],15:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],22:[2,10],24:[2,10],33:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],44:[2,10]},{5:[2,11],11:[2,11],12:[2,11],13:[2,11],15:[2,11],17:[2,11],18:[2,11],19:[2,11],20:[2,11],22:[2,11],24:[2,11],33:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],44:[2,11]},{5:[2,12],11:[2,12],12:[2,12],13:[2,12],15:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],22:[2,12],24:[2,12],33:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],39:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],44:[2,12]},{16:35,17:[2,42],45:[1,36]},{4:37,6:4,7:5,8:6,9:7,10:8,11:[1,9],12:[1,10],13:[1,11],14:12,15:[1,13],18:[1,14],19:[1,15],22:[1,26],24:[1,16],27:22,28:23,31:24,32:25,33:[1,27],35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32],40:[1,17],41:[1,18],42:[1,19],43:[1,20],44:[1,21]},{4:38,6:4,7:5,8:6,9:7,10:8,11:[1,9],12:[1,10],13:[1,11],14:12,15:[1,13],18:[1,14],19:[1,15],22:[1,26],23:[1,39],24:[1,16],27:22,28:23,31:24,32:25,33:[1,27],35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32],40:[1,17],41:[1,18],42:[1,19],43:[1,20],44:[1,21]},{14:41,22:[1,26],25:40,27:22,28:23,31:24,32:25,33:[1,27],35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32]},{5:[2,37],11:[2,37],12:[2,37],13:[2,37],15:[2,37],17:[2,37],18:[2,37],19:[2,37],20:[2,37],22:[2,37],24:[2,37],33:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37]},{5:[2,38],11:[2,38],12:[2,38],13:[2,38],15:[2,38],17:[2,38],18:[2,38],19:[2,38],20:[2,38],22:[2,38],24:[2,38],33:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38],44:[2,38]},{5:[2,39],11:[2,39],12:[2,39],13:[2,39],15:[2,39],17:[2,39],18:[2,39],19:[2,39],20:[2,39],22:[2,39],24:[2,39],33:[2,39],35:[2,39],36:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39]},{5:[2,40],11:[2,40],12:[2,40],13:[2,40],15:[2,40],17:[2,40],18:[2,40],19:[2,40],20:[2,40],22:[2,40],24:[2,40],33:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40]},{5:[2,41],11:[2,41],12:[2,41],13:[2,41],15:[2,41],17:[2,41],18:[2,41],19:[2,41],20:[2,41],22:[2,41],24:[2,41],33:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41]},{5:[2,22],11:[2,22],12:[2,22],13:[2,22],15:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],22:[2,22],24:[2,22],26:[2,22],33:[2,22],35:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],44:[2,22]},{29:[1,42],30:[1,43],32:44,35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32]},{29:[2,26],30:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[2,26],39:[2,26]},{29:[2,27],30:[2,27],35:[2,27],36:[2,27],37:[2,27],38:[2,27],39:[2,27]},{29:[2,28],30:[2,28],34:[1,45],35:[2,28],36:[2,28],37:[2,28],38:[2,28],39:[2,28]},{29:[2,29],30:[2,29],34:[1,46],35:[2,29],36:[2,29],37:[2,29],38:[2,29],39:[2,29]},{29:[2,32],30:[2,32],35:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[2,32]},{29:[2,33],30:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[2,33]},{29:[2,34],30:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[2,34]},{29:[2,35],30:[2,35],35:[2,35],36:[2,35],37:[2,35],38:[2,35],39:[2,35]},{29:[2,36],30:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36]},{1:[2,1]},{5:[2,4],11:[2,4],12:[2,4],13:[2,4],15:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],22:[2,4],24:[2,4],33:[2,4],35:[2,4],36:[2,4],37:[2,4],38:[2,4],39:[2,4],40:[2,4],41:[2,4],42:[2,4],43:[2,4],44:[2,4]},{17:[1,47],45:[1,48]},{17:[2,44],45:[2,44]},{6:34,7:5,8:6,9:7,10:8,11:[1,9],12:[1,10],13:[1,11],14:12,15:[1,13],17:[1,49],18:[1,14],19:[1,15],22:[1,26],24:[1,16],27:22,28:23,31:24,32:25,33:[1,27],35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32],40:[1,17],41:[1,18],42:[1,19],43:[1,20],44:[1,21]},{6:34,7:5,8:6,9:7,10:8,11:[1,9],12:[1,10],13:[1,11],14:12,15:[1,13],18:[1,14],19:[1,15],20:[1,50],22:[1,26],24:[1,16],27:22,28:23,31:24,32:25,33:[1,27],35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32],40:[1,17],41:[1,18],42:[1,19],43:[1,20],44:[1,21]},{20:[1,51]},{14:53,22:[1,26],26:[1,52],27:22,28:23,31:24,32:25,33:[1,27],35:[1,28],36:[1,29],37:[1,30],38:[1,31],39:[1,32]},{22:[2,20],26:[2,20],33:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],39:[2,20]},{22:[1,54]},{22:[1,26],31:55,33:[1,27]},{29:[2,25],30:[2,25],35:[2,25],36:[2,25],37:[2,25],38:[2,25],39:[2,25]},{29:[2,30],30:[2,30],35:[2,30],36:[2,30],37:[2,30],38:[2,30],39:[2,30]},{29:[2,31],30:[2,31],35:[2,31],36:[2,31],37:[2,31],38:[2,31],39:[2,31]},{5:[2,13],11:[2,13],12:[2,13],13:[2,13],15:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],22:[2,13],24:[2,13],33:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],39:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],44:[2,13]},{17:[2,43],45:[2,43]},{5:[2,14],11:[2,14],12:[2,14],13:[2,14],15:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],22:[2,14],24:[2,14],33:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],44:[2,14]},{5:[2,15],11:[2,15],12:[2,15],13:[2,15],15:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[1,56],22:[2,15],24:[2,15],33:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],39:[2,15],40:[2,15],41:[2,15],42:[2,15],43:[2,15],44:[2,15]},{5:[2,17],11:[2,17],12:[2,17],13:[2,17],15:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[1,57],22:[2,17],24:[2,17],33:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],44:[2,17]},{5:[2,19],11:[2,19],12:[2,19],13:[2,19],15:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],22:[2,19],24:[2,19],33:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],39:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],44:[2,19]},{22:[2,21],26:[2,21],33:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],39:[2,21]},{5:[2,23],11:[2,23],12:[2,23],13:[2,23],15:[2,23],17:[2,23],18:[2,23],19:[2,23],20:[2,23],22:[2,23],24:[2,23],26:[2,23],33:[2,23],35:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],44:[2,23]},{29:[2,24],30:[2,24],35:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24]},{22:[1,58]},{22:[1,59]},{5:[2,16],11:[2,16],12:[2,16],13:[2,16],15:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],22:[2,16],24:[2,16],33:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],39:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],44:[2,16]},{5:[2,18],11:[2,18],12:[2,18],13:[2,18],15:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],22:[2,18],24:[2,18],33:[2,18],35:[2,18],36:[2,18],37:[2,18],38:[2,18],39:[2,18],40:[2,18],41:[2,18],42:[2,18],43:[2,18],44:[2,18]}],
defaultActions: {3:[2,2],33:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var ast = require("./state_test.ast")
 

var currentSection = undefined;
var defines = {};

function fretElemForValues(string, fret_values, loc) {
  var type = fret_values[0];
  var fretNum = fret_values[1];
  var options = fret_values[2];
  if (type == "") {
    return new ast.FretNoteElement(string, fretNum, loc, options);
  } else if (type === "x") {
    return new ast.FretMuteElement(string, loc, options);
  } else if (type === "b") {
    return new ast.FretBendNoteElement(string, fretNum, loc, options);
  } else if (type === "h") {
    return new ast.FretHammerOnNoteElement(string, fretNum, loc, options);
  } else if (type === "p") {
    return new ast.FretPullOffNoteElement(string, fretNum, loc, options);
  } else if (type === "\\") {
    return new ast.FretSlideDownNoteElement(string, fretNum, loc, options);
  } else if (type === "/") {
    return new ast.FretSlideUpNoteElement(string, fretNum, loc, options);
  } 
}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  // Data/Functions made available to lexer actions go here
  var duration_map = {
    'w': '1',
    'h': '2',
    'q': '4',
    '1': '1',
    '2': '2',
    '4': '4',
    '8': '8',
    '16': '16',
    '32': '32',
    '64': '64',
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:/* ignore comments to end of line */
break;
case 2:
                            this.begin("OPTIONS"); 
                            return "SECTION";
                          
break;
case 3:
                            this.begin("DEFINE"); 
                            yy_.yytext = yy_.yytext.replace("->", "").trim();
                            return "DEFINE";
                          
break;
case 4: 
                            if (yy_.yytext.charAt(1) == ".") {
                              yy_.yytext = "." + duration_map[yy_.yytext.slice(2)];
                            } else {
                              yy_.yytext = duration_map[yy_.yytext.slice(1)];
                            }
                            if(yy_.yytext) {
                              return "DURATION"; 
                            }
                          
break;
case 5:return "MUTE"
break;
case 6:return "REST"
break;
case 7:return "REPEAT_MEASURE"
break;
case 8:return "DOUBLE_BAR"
break;
case 9:return "REPEAT_CLOSEOPEN"
break;
case 10:return "REPEAT_OPEN"
break;
case 11:return "REPEAT_CLOSE"
break;
case 12:return "SINGLE_BAR"
break;
case 13: yy_.yytext = yy_.yytext.slice(1); return "BEND" 
break;
case 14: yy_.yytext = yy_.yytext.slice(1); return "HAMMERON" 
break;
case 15: yy_.yytext = yy_.yytext.slice(1); return "PULLOFF" 
break;
case 16: yy_.yytext = yy_.yytext.slice(1); return "SLIDE_UP" 
break;
case 17: yy_.yytext = yy_.yytext.slice(1); return "SLIDE_DOWN" 
break;
case 18: 
                            yy_.yytext = yy_.yytext.slice(1).toUpperCase();
                            if( !/[tT]/.test(yy_.yytext) ) {
                              yy_.yytext = parseInt(yy_.yytext);
                            } 
                            return "FINGER"
                          
break;
case 19: 
                            yy_.yytext = yy_.yytext.slice(1,-1);
                            return "QUOTED_ID"; 
                          
break;
case 20:return "INTEGER";
break;
case 21:/* ignore horizontal whitespace */
break;
case 22:return "OPTION"
break;
case 23:this.begin("INITIAL"); return "NL";
break;
case 24:/* ignore horizontal whitespace */
break;
case 25: this.begin("INITIAL"); return "NL"; 
break;
case 26:
                            this.begin("INITIAL");
                            yy_.yytext = yy_.yytext.trim();
                            return "REST_OF_LINE";
                          
break;
case 27:return "("
break;
case 28:return ")"
break;
case 29:return "."
break;
case 30:return "["
break;
case 31:return "]"
break;
case 32:return ":"
break;
case 33:return "^"
break;
case 34:return "-"
break;
case 35:return '"'
break;
case 36:return "'"
break;
case 37:return "*"
break;
case 38:return "EOF"
break;
}
},
rules: [/^(?:[\s])/,/^(?:#.*)/,/^(?:section\b)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*)([ \t])*->)/,/^(?:t\.?([qhw]|16|32|64|[1248]))/,/^(?:[xX])/,/^(?:r\b)/,/^(?:%)/,/^(?:\|\|)/,/^(?::\|:)/,/^(?:\|:)/,/^(?::\|)/,/^(?:\|)/,/^(?:b([0-9])+)/,/^(?:h([0-9])+)/,/^(?:p([0-9])+)/,/^(?:\/([0-9])+)/,/^(?:\\([0-9])+)/,/^(?:f(([0-9])|[tT]))/,/^(?:("([a-zA-Z_][a-zA-Z0-9_]*)")|('([a-zA-Z_][a-zA-Z0-9_]*)'))/,/^(?:([0-9])+)/,/^(?:[ \t])/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*)=\w*)/,/^(?:([\n\r]))/,/^(?:([ \t]))/,/^(?:(([\n\r])|$))/,/^(?:.*)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:\^)/,/^(?:-)/,/^(?:")/,/^(?:')/,/^(?:\*)/,/^(?:$)/],
conditions: {"DEFINE":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true},"FINISHLINE":{"rules":[26],"inclusive":false},"OPTIONS":{"rules":[21,22,23],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = state_test;
exports.Parser = state_test.Parser;
exports.parse = function () { return state_test.parse.apply(state_test, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}