/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var state_test = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"statements":4,"EOF":5,"statement":6,"[":7,"]":8,"QUOTED_ID":9,"bar_token":10,"REPEAT_MEASURE":11,"DURATION":12,"note_token":13,"SECTION":14,"options":15,"DEFINE":16,"REST_OF_LINE":17,"string_fret_marker":18,"fret_group":19,".":20,"INTEGER":21,"finger_annotation":22,"-":23,"fret_note":24,"articulated_fret_note":25,"MUTE":26,"FINGER":27,"BEND":28,"HAMMERON":29,"PULLOFF":30,"SLIDE_UP":31,"SLIDE_DOWN":32,"SINGLE_BAR":33,"DOUBLE_BAR":34,"REPEAT_CLOSEOPEN":35,"REPEAT_OPEN":36,"REPEAT_CLOSE":37,"OPTION":38,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"[",8:"]",9:"QUOTED_ID",11:"REPEAT_MEASURE",12:"DURATION",14:"SECTION",16:"DEFINE",17:"REST_OF_LINE",20:".",21:"INTEGER",22:"finger_annotation",23:"-",26:"MUTE",27:"FINGER",28:"BEND",29:"HAMMERON",30:"PULLOFF",31:"SLIDE_UP",32:"SLIDE_DOWN",33:"SINGLE_BAR",34:"DOUBLE_BAR",35:"REPEAT_CLOSEOPEN",36:"REPEAT_OPEN",37:"REPEAT_CLOSE",38:"OPTION"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,3],[6,3],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[13,1],[18,3],[18,4],[19,3],[19,2],[19,1],[19,1],[24,1],[24,1],[24,2],[24,2],[25,1],[25,1],[25,1],[25,1],[25,1],[10,1],[10,1],[10,1],[10,1],[10,1],[15,2],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1].join("\n"); console.log(this.$); 
break;
case 2: this.$ = ""; 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 5: this.$ = $$[$0-1].join("\n"); 
break;
case 6: this.$ = (defines[$$[$0-1]] ? defines[$$[$0-1]] : ""); 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = "REPEAT"; 
break;
case 9: this.$ = "d" + $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = "sec: " + $$[$0]; 
break;
case 12: 
      defines[$$[$0-1]] = $$[$0];
      // this.$ = $$[$0-1] + ": " + $$[$0]; 
    
break;
case 13: this.$ = $$[$0]; 
break;
case 14: 
      this.$ = [];
      for (var i=0; i<$$[$0-2].length; i++) { 
        this.$.push("st: " + $$[$0] + " fr: " + $$[$0-2][i]);
      }
      this.$ = this.$.join("\n");
    
break;
case 15: 
      this.$ = [];
      for (var i=0; i<$$[$0-3].length; i++) { 
        this.$.push("st: " + $$[$0-1] + " fr: " + $$[$0-3][i] + "fi: " + $$[$0]);
      }
      this.$ = this.$.join("\n");
    
break;
case 16: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 17: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 18: this.$ = [$$[$0]]; 
break;
case 19: this.$ = [$$[$0]]; 
break;
case 20: this.$ = $$[$0]; 
break;
case 21: this.$ = "x"; 
break;
case 22: this.$ = $$[$0-1] + "f" + $$[$0]; 
break;
case 23: this.$ = "x" + "f" + $$[$0]; 
break;
case 24: this.$ = "b"+$$[$0]; 
break;
case 25: this.$ = "h"+$$[$0]; 
break;
case 26: this.$ = "p"+$$[$0]; 
break;
case 27: this.$ = "/"+$$[$0]; 
break;
case 28: this.$ = "\\"+$$[$0]; 
break;
case 29: this.$ = "SINGLE_BAR"; 
break;
case 30: this.$ = "DOUBLE_BAR"; 
break;
case 31: this.$ = "REPEAT_OPENCLOSE"; 
break;
case 32: this.$ = "REPEAT_OPEN"; 
break;
case 33: this.$ = "REPEAT_CLOSE"; 
break;
case 34: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 35: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:[1,5],10:6,11:[1,7],12:[1,8],13:9,14:[1,10],16:[1,11],18:17,19:18,21:[1,21],24:19,25:20,26:[1,22],28:[1,23],29:[1,24],30:[1,25],31:[1,26],32:[1,27],33:[1,12],34:[1,13],35:[1,14],36:[1,15],37:[1,16]},{1:[3]},{5:[1,28],6:29,7:[1,5],10:6,11:[1,7],12:[1,8],13:9,14:[1,10],16:[1,11],18:17,19:18,21:[1,21],24:19,25:20,26:[1,22],28:[1,23],29:[1,24],30:[1,25],31:[1,26],32:[1,27],33:[1,12],34:[1,13],35:[1,14],36:[1,15],37:[1,16]},{1:[2,2]},{5:[2,3],7:[2,3],8:[2,3],11:[2,3],12:[2,3],14:[2,3],16:[2,3],21:[2,3],26:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],32:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3]},{4:30,6:4,7:[1,5],9:[1,31],10:6,11:[1,7],12:[1,8],13:9,14:[1,10],16:[1,11],18:17,19:18,21:[1,21],24:19,25:20,26:[1,22],28:[1,23],29:[1,24],30:[1,25],31:[1,26],32:[1,27],33:[1,12],34:[1,13],35:[1,14],36:[1,15],37:[1,16]},{5:[2,7],7:[2,7],8:[2,7],11:[2,7],12:[2,7],14:[2,7],16:[2,7],21:[2,7],26:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7]},{5:[2,8],7:[2,8],8:[2,8],11:[2,8],12:[2,8],14:[2,8],16:[2,8],21:[2,8],26:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8]},{5:[2,9],7:[2,9],8:[2,9],11:[2,9],12:[2,9],14:[2,9],16:[2,9],21:[2,9],26:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9]},{5:[2,10],7:[2,10],8:[2,10],11:[2,10],12:[2,10],14:[2,10],16:[2,10],21:[2,10],26:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10]},{15:32,38:[1,33]},{17:[1,34]},{5:[2,29],7:[2,29],8:[2,29],11:[2,29],12:[2,29],14:[2,29],16:[2,29],21:[2,29],26:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29]},{5:[2,30],7:[2,30],8:[2,30],11:[2,30],12:[2,30],14:[2,30],16:[2,30],21:[2,30],26:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[2,30]},{5:[2,31],7:[2,31],8:[2,31],11:[2,31],12:[2,31],14:[2,31],16:[2,31],21:[2,31],26:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31]},{5:[2,32],7:[2,32],8:[2,32],11:[2,32],12:[2,32],14:[2,32],16:[2,32],21:[2,32],26:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32]},{5:[2,33],7:[2,33],8:[2,33],11:[2,33],12:[2,33],14:[2,33],16:[2,33],21:[2,33],26:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33]},{5:[2,13],7:[2,13],8:[2,13],11:[2,13],12:[2,13],14:[2,13],16:[2,13],21:[2,13],26:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13]},{20:[1,35],23:[1,36],25:37,28:[1,23],29:[1,24],30:[1,25],31:[1,26],32:[1,27]},{20:[2,18],23:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18]},{20:[2,19],23:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19]},{20:[2,20],23:[2,20],27:[1,38],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20]},{20:[2,21],23:[2,21],27:[1,39],28:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21]},{20:[2,24],23:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24]},{20:[2,25],23:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25]},{20:[2,26],23:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26]},{20:[2,27],23:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27]},{20:[2,28],23:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28]},{1:[2,1]},{5:[2,4],7:[2,4],8:[2,4],11:[2,4],12:[2,4],14:[2,4],16:[2,4],21:[2,4],26:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4]},{6:29,7:[1,5],8:[1,40],10:6,11:[1,7],12:[1,8],13:9,14:[1,10],16:[1,11],18:17,19:18,21:[1,21],24:19,25:20,26:[1,22],28:[1,23],29:[1,24],30:[1,25],31:[1,26],32:[1,27],33:[1,12],34:[1,13],35:[1,14],36:[1,15],37:[1,16]},{8:[1,41]},{5:[2,11],7:[2,11],8:[2,11],11:[2,11],12:[2,11],14:[2,11],16:[2,11],21:[2,11],26:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[1,42]},{5:[2,35],7:[2,35],8:[2,35],11:[2,35],12:[2,35],14:[2,35],16:[2,35],21:[2,35],26:[2,35],28:[2,35],29:[2,35],30:[2,35],31:[2,35],32:[2,35],33:[2,35],34:[2,35],35:[2,35],36:[2,35],37:[2,35],38:[2,35]},{5:[2,12],7:[2,12],8:[2,12],11:[2,12],12:[2,12],14:[2,12],16:[2,12],21:[2,12],26:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12]},{21:[1,43]},{21:[1,21],24:44,26:[1,22]},{20:[2,17],23:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17]},{20:[2,22],23:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22]},{20:[2,23],23:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23]},{5:[2,5],7:[2,5],8:[2,5],11:[2,5],12:[2,5],14:[2,5],16:[2,5],21:[2,5],26:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5]},{5:[2,6],7:[2,6],8:[2,6],11:[2,6],12:[2,6],14:[2,6],16:[2,6],21:[2,6],26:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6]},{5:[2,34],7:[2,34],8:[2,34],11:[2,34],12:[2,34],14:[2,34],16:[2,34],21:[2,34],26:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34]},{5:[2,14],7:[2,14],8:[2,14],11:[2,14],12:[2,14],14:[2,14],16:[2,14],21:[2,14],22:[1,45],26:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14]},{20:[2,16],23:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16]},{5:[2,15],7:[2,15],8:[2,15],11:[2,15],12:[2,15],14:[2,15],16:[2,15],21:[2,15],26:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15]}],
defaultActions: {3:[2,2],28:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  
 

var defines = {};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  // Data/Functions made available to lexer actions go here
  var duration_map = {
    'w': '1',
    'h': '2',
    'q': '4',
    '1': '1',
    '2': '2',
    '4': '4',
    '8': '8',
    '16': '16',
    '32': '32',
    '64': '64',
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:/* ignore comments to end of line */
break;
case 2:return "EOF"
break;
case 3:
                            this.begin("OPTIONS"); 
                            return "SECTION";
                          
break;
case 4:
                            this.begin("FINISHLINE"); 
                            yy_.yytext = yy_.yytext.replace("->", "").trim();
                            return "DEFINE";
                          
break;
case 5: 
                            if (yy_.yytext.charAt(1) == ".") {
                              yy_.yytext = "." + duration_map[yy_.yytext.slice(2)];
                            } else {
                              yy_.yytext = duration_map[yy_.yytext.slice(1)];
                            }
                            if(yy_.yytext) {
                              return "DURATION"; 
                            }
                          
break;
case 6:return "MUTE"
break;
case 7:return "REPEAT_MEASURE"
break;
case 8:return "DOUBLE_BAR"
break;
case 9:return "REPEAT_CLOSEOPEN"
break;
case 10:return "REPEAT_OPEN"
break;
case 11:return "REPEAT_CLOSE"
break;
case 12:return "SINGLE_BAR"
break;
case 13: yy_.yytext = yy_.yytext.slice(1); return "BEND" 
break;
case 14: yy_.yytext = yy_.yytext.slice(1); return "HAMMERON" 
break;
case 15: yy_.yytext = yy_.yytext.slice(1); return "PULLOFF" 
break;
case 16: yy_.yytext = yy_.yytext.slice(1); return "SLIDE_UP" 
break;
case 17: yy_.yytext = yy_.yytext.slice(1); return "SLIDE_DOWN" 
break;
case 18: 
                            yy_.yytext = yy_.yytext.slice(1).toUpperCase();
                            if( !/[tT]/.test(yy_.yytext) ) {
                              yy_.yytext = parseInt(yy_.yytext);
                            } 
                            return "FINGER"
                          
break;
case 19: 
                            yy_.yytext = yy_.yytext.slice(1,-1);
                            return "QUOTED_ID"; 
                          
break;
case 20:return "INTEGER";
break;
case 21:/* ignore horizontal whitespace */
break;
case 22:return "OPTION"
break;
case 23:this.begin("INITIAL")
break;
case 24:
                            this.begin("INITIAL");
                            yy_.yytext = yy_.yytext.trim();
                            return "REST_OF_LINE";
                          
break;
case 25:return "("
break;
case 26:return ")"
break;
case 27:return "."
break;
case 28:return "["
break;
case 29:return "]"
break;
case 30:return ":"
break;
case 31:return "^"
break;
case 32:return "-"
break;
case 33:return '"';
break;
case 34:return "'"
break;
}
},
rules: [/^(?:[\s])/,/^(?:#.*)/,/^(?:$)/,/^(?:section\b)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*)([ \t])*->)/,/^(?:t\.?([qhw]|16|32|64|[1248]))/,/^(?:[xX])/,/^(?:%)/,/^(?:\|\|)/,/^(?::\|:)/,/^(?:\|:)/,/^(?::\|)/,/^(?:\|)/,/^(?:b([0-9])+)/,/^(?:h([0-9])+)/,/^(?:p([0-9])+)/,/^(?:\/([0-9])+)/,/^(?:\\([0-9])+)/,/^(?:f(([0-9])|[tT]))/,/^(?:("([a-zA-Z_][a-zA-Z0-9_]*)")|('([a-zA-Z_][a-zA-Z0-9_]*)'))/,/^(?:([0-9])+)/,/^(?:[ \t])/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*)=\w*)/,/^(?:([\n\r]))/,/^(?:.*)/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:\^)/,/^(?:-)/,/^(?:")/,/^(?:')/],
conditions: {"FINISHLINE":{"rules":[24],"inclusive":false},"OPTIONS":{"rules":[21,22,23],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = state_test;
exports.Parser = state_test.Parser;
exports.parse = function () { return state_test.parse.apply(state_test, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}